{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 [Speaker 1 00:00] \
I guess I would trace back to open source is that we want a world in which people are free to try to make things, to make the vision that they want. It's not strictly speaking, closed source or closed. And it's just like other people who are trying to keep you from that, that fundamental freedom. That's where I do really like a lot of what Richard contributed, this idea that these there are fundamental freedoms, the freedom to create, the freedom to share. You know, these are human goals and human aspirations and we should want to support that. In some ways, open source is is is one part of the science of what works about that. \
\
[Speaker 2 00:43] \
This is such an and. \
\
[Speaker 3 00:44] \
This is Eric. \
\
[Speaker 2 00:46] \
Welcome to Luminary kitchen table style conversations with some of the world's brightest minds exploring boundaries of human knowledge. Join us on a pursuit to transmit intuition and ideas. Find us at Luminary FM or on Twitter at Luminary FM. We would love to hear from you. \
\
[Speaker 3 01:06] \
Why are technology and software an integral part of change and shaping the world around us? We seek to dissect this question in the second season of Luminary. It's arguably at the heart of defining our trajectory as a civilization through a vast series of topics. Our ambition is to weave a narrative incorporating a social, technical, historical, and philosophical lens with contributions from Titans of technology, theorists, builders, and tinkerers alike. If you have ideas, feedback, or simply suggestions for who to talk with, drop us a line on Twitter. The spirit of this journey is collaborative and community oriented. Our guest today is Tim O'Reilly, Founder, CEO and Chairman of O'Reilly Media, a company which is profoundly impacted how generations of software engineers and computer hobbyists have learned programming. Tim is, of course, a luminary of the technology industry and hardly needs an introduction. It's difficult to overstate the importance of his contributions. Tim has been active in the open source and Internet community for decades, providing the intellectual inspiration behind terms like open source software and Web 20. Our. \
\
[Speaker 2 02:23] \
Conversation with Tim centers around open source. We discuss the characteristics of open source software, which company has best executed on its open source strategy, and how the open source ethos has influenced the tech industry and beyond. We also covered Tim's latest project around algorithmic rents. Welcome, Tim. Absolute honor to have you here. We've been fans of your work. We would love to get started with what's your personal relationship with technology? \
\
[Speaker 1 03:05] \
That's an interesting question because of course I've been associated with technology for a good part of my life. It's sort of interesting because I do love technology and I love playing with it, but I'm really more of a, you know, by training and application. I'm much more of a, of a literature and philosophy guy when it really comes down to it. And I I fell into computers and I fell in love with originally with the the writing tools, quite honestly, of Unix related systems, regular expressions and tech senators, and particularly stream matters of the progression from in the in Unix from VIEX and VI to said and look and then Pearl shell programming. It was kind of like a very natural path for building power tools. In some sense, probably the computer book that probably most expresses my relationship to technologies, a book I did in 1992 called Unix power tools, because I've always been a power user as opposed to like a professional programmer to the programming I've done has been, you know, relative Everton accounting system once in debase 2 for my company in the early days. And I did wrote lots of sample programs as part of documentation and I ported lots of things in the days when you you had the port Unix programs to get them to run on your particular machine. But I don't think I've ever written a true complex application from scratch. And so people give me credit for a lot of things. I sometimes describe myself as somebody who can see the patterns and technology from the cheap seats. When you're far enough away you can you can see more. And that was true both in terms of where I lived. I didn't live in Silicon Valley. I lived up in Sebastopol, which is an hour north of San Francisco, so 2 1/2 hours to Silicon Valley. So I was close enough to be part of it, but always peripheral and always seeing it from the outside in. And my original training in Greek and Latin classics when I first it was very relevant because when I started having to deal with computer documentation, it felt a lot like working with Latin or Greek manuscripts where you don't know all the vocabulary, but you know the structure of sentences And you kind of were able to go, well, this must be a noun, this must be a verb, right? Literally in the very beginning, when I was first I, I literally got my first job writing a technical manual the day I saw my first computer. This is a digital equipment corporation. It was very, I wasn't like one of these kids who grew up. Yeah, I had my own computer and I was programming at the age of 12. I was 24 years old. And I had a friend who got asked to, I was a programmer who got asked to write a manual. And I was thought of myself as a writer. And I said I'd help you out and help him out. One thing I want to do another. I did fall in love with computers. I mean, particularly, again, I the power to manipulate text. And that's why I think some of the current stuff with large language models is amazing, the continuation of kind of my journey with computers. \
\
[Speaker 2 06:05] \
It's it's pretty fascinating. \
\
[Speaker 3 06:07] \
Anything in particular, Tim, that sparked your interest or curiosity in open source, which has been an area you've dedicated a lot of time to over the years? \
\
[Speaker 1 06:17] \
I was a Unix user, and I guess the thing that really got me going, it was sort of a series of things. I already become sort of a public technology advocate, but that was mostly around the worldwide web and the Internet. Been involved in Unix and was using it. We used it for my business. I wrote a book called Unix Text Processing, which was originally for another publisher, but it actually took the included parts of our books on learning Unix and BI and said milk and so on. So it was very much wrapped up with my business, which was a technical writing consulting business. But then I've been fighting for the open web. So we started out, we probably created this site called GNM, the Global Network Navigator, which was the first web portal in late 90s to early 93. And I came up with the idea of, of having the ad supported. So I was the first person to do ads. Oh, well, my idea of an ad was what we now think of as a commercial website. When I, we first started, the way you got information about products was these little bingo cars inside a magazine that you circled. I want to learn more about product 66 and I want to learn something else about product 92. And you mail it in and then they send you a brochure in the mail. I went, wow, the Internet could make this so much easier. And since I was selling my books by direct mail, I thought, wow, this is great. We can just put up the information on the Internet. So it was really the whole Internet used in catalog was a catalogue of non commercial sites, but it started to be a catalogue of commercial sites which were paid, we sold to AOL. But anyway, I, I went from that to, you know, we tried to create the first PC based, we did create the first PC based web browser 'cause we thought, wait, this is getting owned by the big guys. And as does the Internet's becoming popular. So we create a product called the Internet in the box. And then Microsoft and Netscape started fighting over and trying to control the Internet and I became an advocate for open Internet standards. And then the next stage with an open source was again, I was an active open source user, but more from the Internet tradition. And probably my next step was when I in 96, when I decided to run to, to create a Pearl conference. And that was inspired by, we had just started doing publishing about Windows as well. And we hired Andrew Schulman, who'd written a book called Undocumented DOS and Unauthorized Windows 95 to be our editor in that space. It was right when Microsoft had introduced something called Active X and they were running national television commercials. And Andrew said, you know that ad that they're showing everything in it where they were. It was activate the Internet, making dynamic web pages. He said everything in it was done with Pearl except that little taxi cab going across the screen in the ad. The little animated thing was that's the only actual act of X piece of that. And I went, **** nobody's actually giving them how important Pearl is. So I wrote a white paper called the Importance of Pearl. And I thought Pearl won't have a conference too. And it was our second edition of Programming Pro in 1996 was the best selling computer book. And nobody was talking about. And I said, this will be basically subsidized marketing for Pearl and a chance to bring the Pearl community together. So I brought the Pearl community together in 96 and then I was like, whoa, everything that I publish is like this. It's, you know, free software. And then in 98 I organized an event called the Freeware Summit because the term open source wasn't out there. And it was sort of interesting because I just had it just a very different take on it than the dominant narrative that came from the Free Software Foundation where it was a political movement. I had come into this world with AAT and T Unix. They were really Berkeley Unix, which was under the aegis of a proprietary AT&T license. But the practices that we now think of as open source, look at how Unix was originally assembled. It was like, oh, this program came from Duke University. This came from Berkeley, this came from and it was sort of like I went, no, this is really much more about the Internet than it's about licenses. What was coming to be called the Internet at the time, It was more used in that dial-up and then dial-up Internet. But it was like this contributory community. And I saw that that contributory community flourished even in the presence of licenses that the free software orthodoxy said it shouldn't, the shouldn't work. And in fact it did. So anyway. So I was inviting together not just people from the free software community because that was just eventually it became Linux as the core, but it was the GANU project, which is really a re implementation of of all the Berkeley Unix utilities. You know, it was GCC and and Emacs and I was Avi guy. I preferred the two. \
\
[Speaker 2 11:08] \
Setting the base for open source. Thanks for providing us a preview of the inception. From your point of view and your interest, how would you define open source? \
\
[Speaker 1 11:20] \
Well, let me just also say something about the way my mind works. I'm not a big believer in definitions. Definitions are an attempt to draw a boundary around a thing. And I find that most things have a core and it radiates out. And gravity is a better as a good metaphor, right? That is a set of things that are at the core of what we call open source, and one of them is access to source code. One of them is the ability to share source code with other people. The first freedom, you know, the freedoms that Richard Solomon outlines for free software I think are really important, but I don't. But it's clear to me that those freedoms can flourish in even in the presence of restricted licenses if you have a big enough software population. Like one of the stories I used to tell was the origins of what was it at Microsoft. I've now forgotten the name of the technology, but one of their their big technologies, it was created by two engineers over Christmas, just as they want to do something cool with the web and they kind of spread like wildfire within this big company. I later coined the term gated source. It was a gated open source community, you know, like if you were in, in this particular company, then you had access and, and people adopted modified it and eventually it came to Bill Gates notice and it became a big corporate initiative. I go, that's not that different from how Larry wrote parole for himself and his friends. And then more and more people found it. So I went, this is a characteristic of network communities and shared community of practice and licenses may help to protect that, but they don't 'cause it in fact, one of the things that in in the days when, you know, everybody was trying to struggle through this, I said, look, there were all these sort of supposedly central open source projects that were floundering like Open Office or even the GIMP. They never got wide adoption. I go, well, why is it? And they went, oh, actually they don't have what I came to call the architecture or participation, the principles that made it possible for people to develop Unix independently. Elena's Torvalds told me once I I couldn't have done Linux with his Windows. Even if I had had access to the source code, the architecture wouldn't have supported it otherwise. You couldn't have a what was effectively a relatively small kernel added to Windows. Whereas in Unix, the architecture of communicating programs was already there. And so writing a new kernel for it was a much smaller job. And that got me off on this idea of the architecture participation. And you saw also back in the days when I was fighting over web server standards with Microsoft and Netscape, I kind of point out there was a point where they're going, Apache isn't keeping up, They're not adding all these latest features. And I said that, yeah, they're doing it a different way. They said we do the web server layer and we have this extension layer, and people are doing all that stuff on top of what we do. And that was also how Pearl work. There was cpanel. Yeah, the Pearl Archive now like I kind of saw that this effective projects had small pieces that you could connect together, whereas if it was big tightly bound spaghetti code like Open Office, just slapping an open source license on it wouldn't make it suddenly work. So I went, OK, licenses are are much less central to the narrative. What's really central is the desired people to collaborate. And then of course, you see the continuum, if you talk about the gravitation extends out further, you go, well, now we have Open Access science publishing, which is also about more access to knowledge. \
\
[Speaker 2 14:56] \
That is really fascinating on how you define or not define open source, but the ethos, which is something very important to you. By the way, the book you were referring to is it The Unix Programming Environment. \
\
[Speaker 1 15:09] \
Yeah, sorry. Yeah, the UX programming environment, Yes, yeah. \
\
[Speaker 2 15:11] \
Yeah, no, I I read that growing up as part of my. \
\
[Speaker 1 15:15] \
Education, so it. \
\
[Speaker 2 15:16] \
It is very interesting you. \
\
[Speaker 1 15:18] \
Mentioned. Yeah, actually if you go look at the Wikipedia entry for it, I wrote that. \
\
[Speaker 2 15:24] \
And in fact, I remember growing up and doing my bachelor's in India and reading the first book from you, which was around Pearl, which you talk about. And I wondered back then, there's to like you were a name in the student community, if you will. \
\
[Speaker 1 15:41] \
Yeah, no, it's true. And yeah, there was a time when did an open source speaking tour in England. My my mother's who went with me and she was like, you're kind of like a rock star. I like to say I've had my 20 minutes of fame, you know, the Andy Warhol 20 minutes of fame several times. But I I I do also say my reputation exceeds me. \
\
[Speaker 3 16:04] \
Maybe to sort of further flesh out what open source software it means to you, Tim, how would you juxtapose that model of software production with other modalities? And the other modality really is closed source. So how would you juxtapose those two? How are the organizing principles different? \
\
[Speaker 1 16:25] \
So I would not actually agree with that statement. I I just don't think that open source versus closed source is a terribly interesting distinction, particularly today. \
\
[Speaker 3 16:36] \
Also. \
\
[Speaker 1 16:37] \
If you notice, I mean again, it depends how you define open source or closed source. I remember Tom Preston Werner when he was the CEO of GitHub gave a talking. He said. One of our big issues is nobody puts a license on the code that they put on GitHub. It's just no license. It's neither open source nor closed source. It's effectively open. And so I guess I would just sort of challenge you and go, OK, well, what are the interesting distinctions today? I mean, they're between code that I guess when I think about what's important is the system intelligent? If you think about like the web as a paradigm, you know, HTML in its early days was had this feature that you could always view stores so you could copy and paste somebody's website really easily go, oh, I like the way that looks. I'm going to do that and I'm going to modify the code. Then it went through a phase where even though it was like that, it was obfuscated and everything became, you know, JavaScript and the levels of, of of depth in it that you had to go to be able to understand what was there made it effectively not possible for somebody to just take it and run with it as easily. So I think of of there's an axis between actually something Larry Wall said once Larry Wall being the creator of Pearl to one of his goals for, for Pearl was that it was, it was kind of like the acquisition of human language. You could do baby talk in it and you could write a complex PhD thesis in it. And there was a continuum. And we have a bunch of systems that are not intelligible unless you're an expert. And, and I think that, for example, a much more interesting access than open source or closed source like VBA. Ordinary people could write Visual Basic for applications, whereas there's a lot of stuff that's nominally open source, but is is so professional that it's less accessible instead of the same thing. Today in the age of AI, have all this new accessibility of programming, this idea of low and no code solutions and stringing tools together. And I was loved that idea of the accessibility of programming. Effectively, programming is speech with computers. It's how we tell them what to do and the whole arc of computing is making that easier. It's like literally people used to program by the very beginning was you made a bunch of hardwired circuits and then it was like you can input a program bit by bit using switches on the front of the computer. And then we got the assembly language that was starting to talk directly to the registers and and so on. Then you had slightly higher level languages and, and then you had compilers and then you had scripting languages. To me there was this huge breakthrough with the web where for the first time you actually built an interface with human readable content and then you embedded little bits of code. Back in 98 when I was talking about this, I, I, I call the Infoware. At the time I said look the difference between the web and something like say Microsoft Word. Is Microsoft Word as little bits of human language embedded in a lot of code, whereas a web application has a little bit of has call outs to the code embedded in human life? This inflection point, and I think right now we're at another inflection point where with machine learning, where a whole other level of abstraction, like you can literally just talk to mid journey about the picture you want to create. And I say, no, no, no, not that. And again, there's sure there's a point like interface, but we are getting closer and closer to a world where the machines have learned to to understand our language. Sam Altman came and asked me several years ago, Hey, could they train on O'Reilly content? And I went when you have a way to compensate our authors, you know, of course, that's an issue today. So one of the arguments for the open source models is it gives people who have some kind of content that they don't want to give away more control. And that goes back again in open source. I remember Michael Tieman, who you may remember from Cigna Solutions back in the day, and then Red Hat, he once said what we sell at Red Hat is control. We tell companies when you use our products, you have control over your products. And that's the dynamic that's playing it out right now. Like, OK, if I use ChatGPT or if I use Bard or if I use Claude, how much control do I have versus if I use lava, alpaca and derivatives? And so open source is less about the do I have access to all the source code and, and more about do I have control. In this case, it's control over what happens to the data I train it read. Am I having to give up my data in order to train with my data or, or can I keep my data? And again, this goes back to a fundamental idea that I've had. And this goes back to when we, we were working with open documentation licenses. And there were a lot of people who were religious about why you, you open source all your books. And I go, because we would have fewer books. And my goal is to have as many useful books as possible. And there's cases where I have an author who says, I'll only do this if I'll make X much money. Then I have to say, well, what's the way that I can make you more money, you know? And so we did some books when authors didn't care, they wanted us to get it out there. We did books with open licenses. In other cases, Send Mail being notorious exception, we'd gone through 5 authors who'd failed on it. We had a guy who was like, OK, I'll write this book. But he was very much wanted to, you know, make his living at it. He was going to vote two years to writing it. Eric Coleman actually rewrote Sent Mail 'cause Franco Stalles was finding so many problems in the version he was documenting. Is this easier to rewrite the software? \
\
[Speaker 3 22:33] \
That line of thinking, Tim, goes to the question, which seems like a central question around incentives. You have these incredibly vibrant and kind of rich open source ecosystems that have been instantiated over the last few decades versus let's say Microsoft, where there is a very clear revenue model that supports the production of that software. Do you think it's is is that important to understand the incentive structures around open source? \
\
[Speaker 1 23:00] \
I guess I would say the way I think about that again is first of all, open source is an ethos. And I remember I wrote a piece many years ago called Open Source and the Obligation to Recycle, which is you built something, how do you get it out there and make it useful even when it's not useful to you anymore? One of the things that's so sad about the commercial software world, this is a lot of stuff that's kept proprietary even though it's no, you know, it's no longer useful to the people who created it. And they should be going, how do, how do we give this away? So anyway, I, I guess I would just say that there's a lot of opportunity for us to be thoughtful about what we want to have happen. And what I want to have happen is more value created for the world. What I want is for problems to be solved. I look at many of the Internet companies that are proprietary, companies like, you know, Google and even Amazon. Yes, they've done some of open source. My God, they've created enormous value for people. And so even Microsoft created enormous value. You got to get credit for all the things they did do right back in the day, and they're still doing. I wrote a piece many years ago called Information Wants to be Valuable. I, I started talking about Pearl, Larry Wall versus Bill Gates. And both of them were just trying to make their software valuable. And Bill Gates had one way to do it. He figured out that he could basically sell the stuff and make a really big successful company. And Larry Wall was, I'm not that kind of guy, but I can give it away on both of them had this big influence. Tim Berners, Lee, my gosh, he gave away this stuff and it really worked. And again, it's one of the Pearl slogans back in the day. There's more than one way to do it. And so everybody who says, oh, everything should be open source, you go, no, there's a lot of times when there are legitimate reasons for things to be proprietary. But just to go back to our experience with free documentation licenses, this is in the early days of Linux. It was one book we did, and we put it out with a free documentation license. Two or three other publishers immediately republished it. So there were four versions of the book in bookstores. And the conclusion that bookstores came to was, oh, this didn't sell that well. So they didn't carry any of them. You know, in some sense, the institutional structure that you're trying to compete within shapes what is the best choice. And one of the reasons why back in the day, open source was not the best choice for books was that basically it divided the market. And the the market was very much like, we're only going to reorder things that sell above a certain level. Whereas on the Internet, the idea that you could put something out for free and it could just take off the market structure really supported it. \
\
[Speaker 2 25:44] \
So if we were to take this forward, what has open source enabled that wasn't previously possible? \
\
[Speaker 1 25:52] \
Everything you have to look at the the technology world we live in and we think about the Internet Internet all effectively open source, open standards too. But many of the the critical pieces of Internet infrastructure were written as open source, often as part of Brooklyn Unix. Actually, this communications medium that we live in and take for granted was the product of open source. If you were around in the days of proprietary networking, you would remember crappy that was and how limited. So right there you have a fundamental, just an absolutely foundational technology of the modern world. And you, you just go from there. And, and again, if you look at the continuum, there you go, OK, well, here's scientific publishing fact that Google develops Transformers and, and publishes a paper on it. And then all these other people and go and explains how it works and other people go, oh, that's a really cool idea we can do blah, blah, blah, blah. Science is an open source activity in some sense, of course, we're trying to make it better as open source bites, for example, publishing research protocols, publishing the data that was used to come to the conclusions. So you can kind of take the ideas of open source, which really go back to the very beginnings of the foundations of information dissemination in the modern era, the idea that of copyright and which was just and Pat switching design to actually lead to more diffusion of knowledge. And then, of course, you look at all the corruptions of that, like the fact that that copyright got extended from 17 years to the life of the author plus 70. The fact that patents, which you used to require a working model and we're supposed to explain the invention so that they would accelerate. And they had a short term and became these legal buscutory documents that don't actually teach you much of anything about the invention. You can't even figure out sometimes what's being patented. Then you get sued over it and you go, OK, so this thing got perverted, you know? \
\
[Speaker 2 27:56] \
Interesting. \
\
[Speaker 1 27:57] \
Are the incentives in our current market structure that make idealistic companies turn bad? \
\
[Speaker 2 28:04] \
Taking this notion of creating or enabling value or transformation or sharing of knowledge further from open source, how do you view the impact of open source on businesses or business models? \
\
[Speaker 1 28:19] \
Again, this was something that used to get me a lot of ire from the open from truth, people who are religious open source advocates. Or I basically pointed out pretty early on that open source licenses were originally designed for an era where in order to run piece of software, you had to have the code on your machine. And I literally had a party about with Richard Sullivan where he said like Amazon didn't matter because it wasn't running out like on his machine. But I go, yeah, that's exactly why it does matter because we're changing the paradigm when you have what I call actually Dave Stutz from Microsoft originally called softer above the level of a single device, then all of a sudden and then it became software as a service. It undercut the whole world in some ways in which open source and free software were born as narrowly defined because you no longer have that access to the source code. In many cases, you couldn't even have access to the source code. So I pointed out very early on that if if you gave Richard Stallman all the Amazon source code, it would be useless to him or all the Google source code, because this was actually a business processes embodied in software. And you have to be, you know, it's this idea of software as an activity rather than software as an artifact era. And before that softer literally was an artifact. And it isn't an artifact anymore. It's something different. And so I guess all, all I'm saying is that these narrow categories that we put it in can limit our thinking. What we really want to do is say, well, well, first of all, what enables human flourishing? Is this thing enabling human flourishing? Why is it not doing that? What are the incentives that are wrong? What are the incentives that are right? And you basically look at traditions like open source that that teach you something important and valuable about that. And and you, you figured out what, what, what that's good for. \
\
[Speaker 3 30:24] \
We started off a little bit on this trajectory or arc of talking about the evolution, the history of open source, and we like to spend some time on that now. \
\
[Speaker 1 30:33] \
Open source software was in the early days of computers. Most software was effectively open sourcing. This is all bespoke, all required access to the source code and industry control was exerted through hardware and the the need for open source really only came after the Justice Department consent agreed with IBM where they could no longer control the industry that way. And and then all of a sudden that, you know, software became a bad. First of all, they were independent software vendors. The software became a battleground and software became something that was valuable in its own right and sold separately at at which point the start to be battles over software and and access to the source code. And I guess I would say the traditional narrative in which is this invention by Richard Solomon, I've just never rang true to me because I started working with Berkeley Unix before the Pre Software Foundation had even been created. And it had all of the characteristics of that later were ascribed to Linux. And it was in this licensing regime where AT&T was competing with IBM and I just had this permissive university license situation. So I, I guess all I'm saying is I would say that that tradition was pretty well established before Richard went on his proprietary software's evil. I also remember Kurt Mckusick who had taken over at Berkeley angstrom Bill Joy once saying, yeah, Richard has this idea of copyright is evil and so we need to have copy left, which is different. He said. Here at Berkeley we just say take our software down to copy central and copy it. The Berkeley people were clearly a big part of my introduction. Also the X Window System where I had some battles and this is in, in 88, basically they had put out, there's a demonstration version of the software, but their goal literally was to have companies build their own proprietary versions. They're going, hey, we're at a university. We just showed what's possible, go and prove this. And, and then we did the same thing with the documentation. And there were some people who said, oh, your documentation should be free. And Bob Shakespeare, who was the director of the X Consortium, said, no, you're doing exactly what we wanted when you're taking stuff that we gave us in starting point and you're raising the bar and you're improving it. That's what we want. And that led me to one of my goals, certainly in my relationship to open source was always like, what's the intention of the author? How do we respect that? And what's their strategy for disseminating their work and what are the goals? And trying to respect that? Because again, the incentivizing and rewarding the act of creation on the terms that the author seeks is the thing that I really care about. \
\
[Speaker 2 33:27] \
Is there a company which you feel has best executed the open source strategy? \
\
[Speaker 1 33:37] \
I would probably say Google that's in this the true open source strategy. Google and Amazon really, if you look at them as pioneers and this was back in the day again, I got a lot of pushback from open source advocates and I said, look the right way to do this. And this was, you know, my path from open source advocate to Web 2O advocate. I was just like, hey, when one thing becomes proprietary, something else becomes open and valuable. And when something becomes open and and commoditized, something else becomes valuable. And then let me down the path and OK, so in this new world, it's going to be data that becomes the source of proprietary advantage. And so Google and Amazon totally executed. What's the game plan for open sources to build services with it, a delivery list services at scale. And and that was the next era. That's why most of the companies that were Pureplay open source companies are relatively small compared to these next generation giants that built on top of it and built this new free layer where they gave services away, but they didn't necessarily give their source code away. But when they did it, well, they were open. And like you think about Google Maps, it was originally there's this proprietary new approach, but it was actually, it was hackable pretty easily. You could see the JavaScript. People started acne, they started building mashups, so-called. And what did Google do? They went, oh, wait, wait, sorry, let's make that easier for you. And same thing with Amazon. I sure we're all the scraping we were doing. I said give us an API and and they did. That was the first generation of Amazon Web Services. Nothing to do with what really later became where it was a much more well architected platform play. But you look at the value that was created by the new platforms these companies made. I mean, yeah, so you don't have access to the source code for Google Maps, but you can put a map on any site and for many from any totally free and you got the charge for salt. But like, wow, what a what a great gift. You look at Amazon Web Services and how revolutionary it was with S3 and EC2. The first servicing staff, second generation were suddenly people could write software that was running out thousands of machines without having to buy the machines in the early days. We won't service like what would be this great expansion of the ability to use computers at the developed innovative applications. You would probably what you know, Amazon Web share. This is right up there in the Pantheon along with the web and with Linux. So as I'm saying, you know, if you kind of look for the right through line which is acts the computing access to the resources and the capabilities, then open source narrowly defined is relatively small compared to a big important part of it. But you kind of look at this again, this this is more than one way to do it. The fact that chips became proprietary but commodities was incredibly important, and then the fact that operating systems became open and commodities, the fact that the operating systems were commoditized is more important than that they were open. \
\
[Speaker 2 36:47] \
Yet. \
\
[Speaker 1 36:48] \
Exactly. And so the commoditization, I once gave a talk, this would have been probably about 9798, right? It's called the three CS of open sourcing. It was commoditization, community and collaboration, I think. \
\
[Speaker 2 37:02] \
That is pardon. We spoke about a for profit organization doing good with executing on open source strategy. \
\
[Speaker 1 37:10] \
Executing both on open source strategy, IE building on top of it, but also creating services that were open enough that they ignited a huge wave of innovation and value creation for other people. \
\
[Speaker 2 37:22] \
Got it. And is there a non profit organization which you can think of which may have done a similar contribution? \
\
[Speaker 1 37:29] \
Wikipedia was they they effectively were kind of an open source play for the development of useful documents, mostly in this encyclopedia. In some ways we wonder if we don't talk about as much. But how many of the side projects that big open source figures are known for, like in the case of Blair Wolm, the early day people were sending around source code and patch allowed you to basically just send around a little clip of the part that needs to change. It was basically built on top of diff. Well, then Linus sorbles Git. You know, Git and then GitHub have played an enormous role, probably as important as Linux. Yeah, that's almost a master template for how you share software today. That is, do you remember the days when it was like there were all these proprietary distributions, you know, So again, this that alternation of free and proprietary. So Red Hat was a proprietary distribution of free software. \
\
[Speaker 3 38:33] \
Let's talk culture. Tim, you mentioned the open source ethos, and we're curious to hear how you think about open source and the way it is influenced culture within the technology industry and even beyond as well, sort of more popular culture, mainstream culture. But let me just start with how you perceive open source, the ethos open source, how that has influenced culture within the technology industry. \
\
[Speaker 1 39:01] \
Well, I think the ethos part is maybe there was a period when I think that the ideals free and sharing in the early days of the Internet and the early days of open source was really there was a really powerful ethos. But that's really been long overshadowed by the Silicon Valley Let's Get Rich ethos. I don't think that that's it. It's still kind of a hacker culture here. But I guess I always see this alternation of these periods of innovation and openness and then people trying to capture the value and they they just long to 2030 year cycle. And where you see this new idealism around some of the companies who are doing AI today, because again, in the idealism is a powerful way to grow the market, to capture the market. And then if somebody comes in, tries to capture and flows off the market. So I'm just saying it's just, it's a sine wave and and hopefully it's a sine wave with a, an ascending slope. But the thing that I would say more important than the ethos was that almost like hacker celebrity culture. That programmers became superstars and open source was a very powerful way to do that. If you were a singer, you have a hit song. If you're a software developer, you have a hit piece to software, you're a celebrity. So the visibility of your of people's work and the transparency, you could see who is a good programmer by looking at the codes that they put up on GitHub. Yeah that's, that's a profound change in in, in culture. And then I, I think that the probably the other piece that I would say is really significant is that we have a bigger and bigger library of capabilities. And that that's both the result of open source, but also the death of open source, right? Because in some sense, we're increasingly assembling pieces of code that we, we don't actually understand. We just have to trust and rely on. And that's not that different from what happened. You know, yes, you can dig in if you want to, but like when you're using 15 different libraries in your code and you're writing big complex piece of soccer, which is way more complex than you used to be able to write, right? Because you're relying on this work of other people, a lot of those things are opaque to you. So I guess I would say that the value of having enormous amounts of, of reusable software. I mean, I think that's, I guess maybe the thing I, I'm getting at is one of the things that open source did is it really made software more reusable. But now this reusability via APIs and things are more isolated. So you get many benefits, but you get, you don't get all the benefits necessarily. Like you go, I want to understand that or I want to change it in some way. So there's always trade-offs. \
\
[Speaker 3 41:55] \
Do you feel like the open source ethos has meaningfully influenced popular culture where at some point in time it has at? \
\
[Speaker 1 42:03] \
Some point in time, it definitely did. And of course, those echoes reverberate down the ages. I do think you just look at, for example, Open Access science publishing, that's a child of open source. And still, yeah, it's transforming an industry that was very close and very lending. And that story is not over. I think open source is part of that long narrative. \
\
[Speaker 2 42:26] \
I think going back to the open source influencing culture, do you have a point of view of how the software even gets created in these big companies and how that may have been influenced by the open source culture and the training the engineers are going through while they're studying? \
\
[Speaker 1 42:47] \
Well, certainly I would say open source, you know, has changed the game in a fundamental way. I mean, the sense that like if you're in a big company like Google or Microsoft, you have all of the benefits of open source even for your proprietary, but you're operating in the same way with the same tools as you would be with open source, right? So you have these companies with 10s or hundreds of thousands of engineers, that's probably bigger than any external open source community. There's nothing in external Internet scale open source collaboration that probably matches the size of some of the teams, some of these companies that are collaborating on a shared massive piece of code. Open source is just the way it's done today. \
\
[Speaker 3 43:37] \
Let's talk a little about how you see the main tensions right now in open source. I think LL Miss and Denver AI is definitely part of that conversation. Maybe we'll start more broadly. How do you think about the main tensions in open source currently? \
\
[Speaker 1 43:53] \
I don't think about it. \
\
[Speaker 3 43:55] \
Yeah. Let's talk about what you mentioned earlier around proprietary large language models and open large language models. What's your point of view on that dynamic? \
\
[Speaker 1 44:11] \
I think that the game is still afoot, as Sherlock Holmes used to say. I think that this question of whether AI is going to be large, centralized, and owned by a couple of companies is a profoundly important question. While it's true that the training costs are coming down, I, I, I believe that fine tuning open source models is looking to be a source of competition for the big guys. And I think that's, I guess maybe one important role for open source is as a kind of competitive pressure. One of the key axes of control is can you invent the next thing on top of it. And if you look at the way you have a real paradigm shift, it's usually by somebody going sideways from the current regime because there's too much control in the hands of a few people. So in the days of IBM's dominance, it was the personal computers and the personal computer software, which was. Yeah, it was where all this amazing innovation happened and broke the market into a new direction and commoditized computing and made it available for everybody. And then Microsoft owns everything, controls everything, makes it impossible for tells the V CS where they can invest and where they can. And it's really the only company that can decide what's going to happen. Innovation just isn't really happening in that traditional software ecosystem. And everybody kind of goes, what the hell, it's going to play with this Internet thing where nobody knows how to make money, but it's fun, it's cool, let's do that. And sure enough, they invent something radically new. And I think we were getting in that same stage with the dullness of four or five big tech companies, everything from the web to mobile and, and then suddenly you get this AI breakthrough coming from what was originally a non profit and open AI. The statement is exciting to me. Is that what history teaches us is that yes, eventually the profit motive causes technologies to close down and make innovation less possible. And guess what? It bursts out somewhere else because it can't be denied. The human desire to explore and express and make new things breaks out in some new form. There's a rich interplay of business models is a rich interplay of strategies, and they can all work in one way or another. And and of course there's bad behavior. Bad behavior is usually trying to restrict other people from doing certain things or exploring certain things. \
\
[Speaker 2 46:58] \
Where has open source failed? \
\
[Speaker 1 46:59] \
It's kind of an interesting question because I I don't there's this great problem that I've always loved. I I first used it in a talk I gave called Why I Love Hackers back in it was 2007 or 8. I ended the talk with Miss Paul Jacob Wrestling with the Angel, which is a story from the Old Testament, and Rilke's Paul, which of course is true and I've only read translated from German, so I feel I can just be pretty loose with my own retranslation of the translation. He says what we fight with is so small and when we win it makes us small. What we want is to be defeated decisively by successively greater beings and that idea of fighting with big hard things and not winning is what we want. And so the fact is open source didn't, if you remember, there was a time when it was like we are going to replace Microsoft and it didn't happen. Is that a failure or is that a success? There was this struggle with the profit motive. There was a struggle with this desire to own things and it and it had this amazing transformative effect on everything. If you're a ******** open source or die kind of advocate, you go, that's a failure. I go That's an enormous success. What we want is to be defeated decisively. The things that were built on top of open source are so much greater than the vision of the original open source advocates. Except maybe Tim Berners-Lee, who didn't really have a vision. He was just like giving this **** away. I want people to be able to collaborate and communicate. \
\
[Speaker 2 48:32] \
It is the building block for what we do today. So in the end, we can save depends on how we count victories and outcomes. I think that's right. \
\
[Speaker 1 48:44] \
Well, then, and if our goal is simply to make good things happen for other people, there are a lot of ways to do that. And the path that says, well, there's only one way to do that, you must do it my way is actually a betrayal of open source. You know, because it it it it's to me, there's a gift culture aspect of open source. Like now again, I go back to Larry Wall. It was flawed by kind of the people who helped shape my thinking about open source. I asked him why he gave away Pearl before that RN and other software he wrote. And he says, I got so much great stuff for free. I want to give something back. And there's a book of that. Everybody should read it. I'm not sure how accurate it is, but aspirationally it's fantastic. It's called the Dawn of Everything by David Graeber at David Wango, and it's basically looking fresh. Look at our story about human civilization and the notion that somehow hierarchy and control are the natural way of things. And basically looks at all these, the evidence that a lot of early civilizations were not that way. They were egalitarian, but they didn't last. And you have to ask ourselves, why is that? Why are we making the choices that we're making as a society? And we're in that one of those moments again today where we go, OK, yeah, we've been celebrating the ability of capitalism to create wealth. Then you go, yeah, but that wealth is incredibly concentrated. And is that really a good thing? Is that what we want? And the idea that I guess I would trace back to open source is that we want a world in which people are free to try to make things, to make the vision that they want. It's not, strictly speaking, closed source or closing. It's just like other people who are trying to keep you from that, that fundamental freedom. That's where I do really like a lot of what Richard contributed, this idea that these there are fundamental freedoms, the freedom to create, the freedom to share. Now these are human goals and human aspirations and we should want to support that. In some ways, open source is is is one part of the science of what works about that and what doesn't work. \
\
[Speaker 3 50:52] \
Yeah, the permissionless innovation part, I think is, is very important. Let's talk about your current projects. Tim, anything exciting you're working on? \
\
[Speaker 1 51:07] \
Right now, well, I'm working on a project with Mariana Mazzucato, who's an economist at University College London. She has anything an institute called the Institute for Innovation and Public Purpose, obviously sounds like something right up my alley. And we got a grant from Amidyar to research what we're calling algorithmic rents because we, we, we talk a lot about labor and capital. But in the classical economists actually had three factors. Yet we've combined capital and rent in, in our minds in, in the early days when, for example, owning a land was the source of wealth. You got, say a farmer who's working the land you have maybe a capitalist is providing money to build a mill. And then you have the landowner who's sitting there collecting rent. You know, and, and, and that's still true today. Companies collect rents and a lot of our institutions for intellectual property are actually the creation of rents. Why are generic drugs attempted the price of proprietary drugs? Because guess what, there's a huge rent in there. If it were just maturing on capital would be so much. Why is housing so expensive? Because effectively we're all rentiers. Whenever we own stock and it grows without us doing anything, we're rentiers. But anyway, I'm trying, we're trying to develop a theory of rent for markets in which things are given away for free. How do you have rent? How does it work? And so we've been looking at companies like Google and Amazon and thinking, oh, OK, wait a minute. What's actually happening is these are two sided markets. And on one side there's money. On the other side where everything's given away for free. The currency is attention. They control our attention in order to have attention to resell to people on the money side of the platform. The idea is that we're we're formulating is this idea of attention rents and how they're extracted from users. And some of this we we've kind of rediscovered the work of Herbert Simon, who is the pioneering computer scientist, economist, political scientist. And he was the one who said, well, what does information consume? Well, that's quite obvious. It consumes attention and, and he predicted in 1970, he said, in the future, we're going to be living in, we're living in a world of information abundance. Attention would be scarce and we will have to have machines that will help us ration our attention. And we certainly go, oh, wait. That's the fundamental what these Internet program platforms ultimately deliver. Google promises, wow, we'll build all these algorithms that show you what is really best for you. Amazon, we're going to help you go through millions of products. Social media, we're going to let you see updates from just your friends. There's millions of people posting. Will you suggest your friends? And so that's the initial promise of every Internet platform is we will actually save you. We will will help you regulate your attention, save your time and then they become platforms where they go actually, we're going to take some of that attention back. We're going to we're going to show you addictive content that makes you spend more time on social media. Or in the case of Amazon, we're going to show you ads, or Google, we're going to show you ads, which used to be like on Google, they were a compliment to organic results. Here are the results that we think are best for you. But guess what, there may be this is an alternate way to surface up you might not know about or that's not commercial product is adjacent to a free product to complement to it. But then they go, no, actually we're going to put our ads in front of the organic results. So you look at a site like Yelp is a, is a great example of this. They like to bang on Google. The fact is they have totally replaced their organic search results with ads. Now it's like the 1st 10 results are ads and then you have to scroll way down before you see any organic results at all. And so you have these companies who built these markets and then they go actually, you know what, we're not going to show you that anymore. We're going to actually show you the stuff that somebody's going to pay us to show you. And that's, that's the the kind of thing we're exploring a document thing. And like right now we're working on a big paper about Amazon that is just as a demonstration project because of course the Amazon went from no ads to satellite. Literally there are on a typical pace, there are 20 ads and four organic results that so basically the merchant just gets charged an extra, an extra fee if there's no in, in, in, you know, economic theory, advertising is good because it provides information that wouldn't otherwise be there. So you learn about new things. But if you look at Amazon, this great case study and there's no new information because the organic result is, is there. And then there's the AB. \
\
[Speaker 2 55:48] \
There are five questions in the rapid fire around here. I'll start. What motivates you? \
\
[Speaker 1 55:55] \
I like to think I'm leaving things better than I found them. \
\
[Speaker 3 55:59] \
Which non consensus views do you hold near and dear? \
\
[Speaker 1 56:05] \
I guess I would say it's probably not a non consensus view, but I hold near and dear the idea that, as I once said, money is like gas in your car. Money in the business is like gas in your car. You know when you go on a road trip, it's not a tour of gas station. \
\
[Speaker 2 56:23] \
What or who had the most impact on your thinking, career or life? \
\
[Speaker 1 56:28] \
Probably this guy George Simon, who I met when I was 14 years old. He introduced me to general Semantics with his famous aphorism The map is not the territory and its idea that you had this back then. So they observe your process of abstraction and not live in the abstractions and go back to what you were looking at. \
\
[Speaker 3 56:46] \
What are you currently reading? \
\
[Speaker 1 56:47] \
Well, right now I'm reading quite a few books. I just finished Economics for the Common Good by John Cavall. I'm reading a novel called The Parrot's Wife. I've always been a Hemingway fan. I just saw the book in a Little Free Library and went, oh, that's about Halle Richardson, I should read it. I'm reading Steinbeck's Diaries that he wrote while he was writing He Used to Be, which is a truly remarkable book. \
\
[Speaker 2 57:09] \
The last question Who is the most original thinker of our time? \
\
[Speaker 1 57:15] \
That's a really tough question. I, I wouldn't say the most original thinker becomes there are all kinds of amazing original thinkers in who are inventors and making new ideas. But somebody who I, I've read who has made me think is this guy David Graver, who died a few years ago. Unfortunately, I was just kind of reframing and rethinking things that everybody so takes for granted. It's very good now. And the other person I'm reading right now, again, not alive right now, but I'm impressed by Herbert Simon. We went from reading that, just that quote, the reading his book Administrative Behavior, which she wrote back in the 70s. You know, this whole idea that human cognition is shaped by our institutions is profound. \
\
[Speaker 2 58:01] \
We hope you enjoyed the conversation. For more information and latest updates, visit us at Luminary dot FM or follow us on Twitter at Luminary FM. Please subscribe to the podcast, pop us on iTunes, review and share with friends. Don't forget to check out the show notes and a quick disclaimer. The views and opinions expressed in this episode by the hosts and the participants are solely those in independent capacity and do not in any way represent the views from any organization, company, or management they may be associated with. And thank you for listening. \
\
[Speaker 1 58:44] \
Microsoft.com. }